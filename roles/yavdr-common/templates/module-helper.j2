#!/usr/bin/env python3
# {{ ansible_managed | comment }}
# based on http://www.e-tobi.net/blog/files/module-helper
# http://www.e-tobi.net/blog/2010/11/06/squeeze-vdr-teil-9-suspend-to-ram
# ported to python3 by Alexander Grothe
#
# This script resolves linux kernel module dependencies automatically, so only
# the base module has to be specified (e.g. dvb_core)

from dataclasses import dataclass, field
from typing import List, Set
import argparse
import pathlib
import pickle
import subprocess
import sys

PROC_MODULES = pathlib.Path('/proc/modules')


@dataclass
class Module:
    name: str
    raw_dependencies: List["Module"] = field(default_factory=list)
    dependencies: List["Module"] = field(default_factory=list)
    n_instances: int = 0

    def __hash__(self) -> int:
        return hash(self.name)

    @property
    def has_dependencies(self) -> bool:
        return len(self.dependencies) > 0 or self.n_instances > 0

    def get_all_dependencies(self) -> Set["Module"]:
        deps = set()
        deps.add(self)
        for dep in self.dependencies:
            deps |= dep.get_all_dependencies()
        return deps


def read_modules(main_module_name: str) -> Set[Module]:
    modules_with_deps = {}
    # read the proc filesystem to get the loaded modules
    for line in PROC_MODULES.read_text().splitlines():
        module, _, n_instances, dependencies, *_ = line.split()
        deps = list(
            filter(lambda x: x not in ('', '-'), dependencies.split(',')))
        modules_with_deps[module] = Module(
            name=module,
            raw_dependencies=deps,
            n_instances=int(n_instances)
        )
    # fill in dependencies
    for m in modules_with_deps.values():
        for dep in m.raw_dependencies:
            m.dependencies.append(modules_with_deps[dep])
        m.raw_dependencies.clear()

    # get a set of the modules we need to unload
    if (main_module := modules_with_deps.get(main_module_name)):
        all_dependencies = main_module.get_all_dependencies()
    else:
        all_dependencies = set()
    return all_dependencies


def run_command_on_module_list(command, module_list):
    for module in module_list:
        cmd = [command, module]
        print(*cmd)
        subprocess.run(cmd, check=True)


def create_argparser():
    parser = argparse.ArgumentParser(description="load or unload modules")
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-u', '--unload', metavar='MODULE', nargs='+',
                       help='unload modules')
    group.add_argument('-r', '--reload', action='store_true',
                       help='reload modules')
    parser.add_argument('-t', '--temp-file', nargs='?',
                        default='/tmp/modules.list',
                        help='''store names of unloaded modules in a file,
                              default location is /tmp/modules.list''')
    return parser


def main():
    parser = create_argparser()
    args = parser.parse_args()
    if args.unload:
        for module in args.unload:
            unloaded_modules = []
            while (all_dependencies := read_modules(module)):
                # print(all_dependencies)
                modules_without_deps = [
                    m for m in all_dependencies if not m.has_dependencies
                ]
                for m in modules_without_deps:
                    print(f"modprobe -r {m.name}")
                    subprocess.run(['modprobe', '-r', m.name], check=True)
                    unloaded_modules.append(m.name)
            print(f"modprobe -r {module}")
            subprocess.run(['modprobe', '-r', module], check=True)
            unloaded_modules.append(module)
            try:
                with open(args.temp_file, 'wb') as f:
                    pickle.dump(unloaded_modules, f)
            except Exception as err:
                sys.exit(err)
    elif args.reload:
        with open(args.temp_file, 'rb') as f:
            all_modules = pickle.load(f)
        run_command_on_module_list('modprobe', all_modules)
    else:
        parser.print_help()


if __name__ == '__main__':
    main()
