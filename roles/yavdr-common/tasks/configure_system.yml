- name: "debconf | disable all cloud-init datasources"
  debconf:
    name: cloud-init
    question: cloud-init/datasources
    value: ''
    vtype: select
  register: cloud_init_debconf

- name: "command | reconfigure cloud-init package"
  command: dpkg-reconfigure -f noninteractive cloud-init
  ignore_errors: yes
  when:  cloud_init_debconf.changed
  # notify: ['rerun required']

- name: "apt | ensure package cloud-init is not installed"
  apt:
    name: cloud-init
    state: absent
- name: apt | ensure packages for tzdata and locales are installed
  apt:
    state: present
    name:
      - tzdata
      - locales

- name: apt | install language packs
  apt:
    state: present
    name: '{{ language_packs }}'


- name: set timezone
  timezone:
    name: "{{ timezone }}"
    hwclock: "{{ timezone_hw | default(omit) }}"
  register: tz_setting

- name: debconf | set timezone
  block:
    - name: set timezone area
      debconf:
        name: tzdata
        question: tzdata/Areas
        value: "{{ timezone | dirname }}"
        vtype: select
      notify: reconfigure_tzdata

    - name: set timezone city
      debconf:
        name: tzdata
        question: "tzdata/Zones/{{ timezone | dirname }}"
        value: "{{ timezone | basename }}"
        vtype: select
      notify: reconfigure_tzdata
  when: tz_setting.changed

- name: debconf | set default locale
  debconf:
    name: locales
    question: locales/default_environment_locale
    value: '{{ default_locale }}'
    vtype: select
  notify: reconfigure_locales

- name: debconf | set locales to be generated
  debconf:
    name: locales
    question: locales/locales_to_be_generated
    value: "{{ generate_locales | join(', ') }}"
    vtype: multiselect
  notify: reconfigure_locales
- name: use bash instead of dash
  debconf:
    name: dash
    question: dash/sh
    value: 'false'
    vtype: select
  notify: reconfigure_dash

- name: flush all handlers
  meta: flush_handlers
- name: create vdr group
  group:
    gid: '{{ vdr.gid }}'
    state: present
    name: '{{ vdr.group }}'


# TODO: ensure openbox, vdr, xorg etc. are stopped
- name: create vdr user
  user:
    name: '{{ vdr.user }}'
    group: '{{ vdr.group }}'
    uid: '{{ vdr.uid }}'
    home: '{{ vdr.home }}'
    shell: '/bin/bash'
    state: present

- name: prepare /var/lib/vdr
  file:
    path: /var/lib/vdr
    state: directory
    owner: '{{ vdr.user }}'
    group: '{{ vdr.group }}'
    mode: '0755'

- name: collect dotfiles for newly created user
  find:
    file_type: file
    hidden: yes
    paths: '{{ vdr.home }}'
    patterns: '.*'
    recurse: no
  register: dotfiles

- name: copy dotfiles to /var/lib/vdr unless they already exist
  copy:
    src: '{{ item.path }}'
    dest: /var/lib/vdr/
    remote_src: true
    force: false
    owner: '{{ vdr.user }}'
    group: '{{ vdr.group }}'
  with_items:
    - "{{ dotfiles.files }}"

- name: "ensure {{ vdr.home }} is a mount-bind from /var/lib/vdr"
  mount:
    path: "{{ vdr.home }}"
    src: /var/lib/vdr
    opts: bind
    state: mounted
    fstype: none
  when: not (vdr.home | realpath is match("/var/lib/vdr"))
- name: disable release-upgrade notifications
  lineinfile:
    path: /etc/update-manager/release-upgrades
    backrefs: yes
    state: present
    regexp: '^(Prompt=).*$'
    line: 'Prompt=never'
  ignore_errors: yes
- name: apt | install basic packages
  apt:
    name:
      - anacron
      - acl
      - at
      - bash-completion
      #- biosdevname  # caution: may change device names after a minimal installation!
      - debconf-utils
      - linux-firmware
      - pciutils
      - psmisc
      - python3-jmespath
      - python3-kmodpy
      - python3-requests
      - python3-ruamel.yaml
      - python3-usb
      - software-properties-common
      - ssh
      - toilet
      - wget
      - wpasupplicant
      - usbutils
      - xfsprogs
      - yavdr-i18n
    state: present
    install_recommends: no
- name: apt | install extra packages
  apt:
    name: '{{ extra_packages }}'
    state: present
    install_recommends: no

- name: apt | install plymouth-theme-yavdr-logo on x86 architectures
  apt:
    name: plymouth-theme-yavdr-logo
  when: ansible_architecture is match("x86_.*")
